name: tudatBundleCI
# adapted from:
# https://github.com/jherico/starter-workflows/blob/master/ci/cmake.yml
# and
# https://github.com/onqtam/doctest/blob/master/.github/workflows/main.yml

on: 
  push:
    branches:
      - master

env:
  BUILD_TYPE: Release

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        name: [
          ubuntu-gcc,
          ubuntu-clang,
          macOS-gcc,
          macOS-clang,
          windows-gcc,
        ]

        include:
        - name: ubuntu-gcc
          os: ubuntu-latest
          compiler: gcc
 
        - name: ubuntu-clang
          os: ubuntu-latest
          compiler: clang

        - name: macOS-gcc
          os: macOS-latest
          compiler: gcc

        - name: macOS-clang
          os: macOS-latest
          compiler: clang

        - name: windows-gcc
          os: windows-latest
          compiler: gcc

    env:
      TUDAT_FLAGS: -DUSE_NLOPT=ON -DBUILD_SHARED_LIBS=OFF -DBUILD_WITH_EXTENDED_PRECISION_PROPAGATION_TOOLS=ON -DBUILD_WITH_SOCIS_2019=ON -DBUILD_WITH_FILTERS=ON
      PAGMO_FLAGS: -DUSE_PAGMO=ON -DPAGMO_WITH_NLOPT=ON -DPAGMO_AS_STATIC_LIB=ON

    steps:
    - uses: actions/checkout@v1

    - name: Set Compiler Environment
      shell: bash
      run: |
        if [ "${{ matrix.compiler }}" = "clang" ]; then
          echo "::set-env name=CC::clang"
          echo "::set-env name=CXX::clang++"
        else
          echo "::set-env name=CC::gcc"
          echo "::set-env name=CXX::g++"
        fi

    - name: Set OS dependent flags
      shell: bash
      run: |
        if [ "${{ runner.os }}" = "Linux" ]; then
          echo "::set-env name=OS_FLAGS::"
        fi

        if [ "${{ runner.os }}" = "macOS" ]; then
        # see https://stackoverflow.com/questions/24380456/
        # how-can-i-make-cmake-use-gcc-instead-of-clang-on-mac-os-x/24380618
          echo "::set-env name=OS_FLAGS::-DCMAKE_C_COMPILER=$CC -DCMAKE_CXX_COMPILER=$CXX"
        fi

        if [ "${{ runner.os }}" = "Windows" ]; then
        # See https://github.com/actions/virtual-environments/issues/10
        # and https://stackoverflow.com/questions/3016448/
        #     how-can-i-get-cmake-to-find-my-alternative-boost-installation
          echo '::set-env name=OS_FLAGS::-G "MinGW Makefiles" -DBoost_NO_BOOST_CMAKE=TRUE -DCMAKE_SH="CMAKE_SH-NOTFOUND"'
        fi

    - name: Clone Submodules
      shell: bash
      run: git submodule update --init --recursive

    - name: Create Build Environment
      run: |
        cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        cmake $OS_FLAGS $TUDAT_FLAGS -DCMAKE_BUILD_TYPE=$BUILD_TYPE -B . -S ../tudatBundle

    - name: Build nlopt
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: |
        cmake --build . --target nlopt --config $BUILD_TYPE

    - name: Re-configure CMake
      shell: bash
      working-directory: ${{runner.workspace}}/build
      run: |
        cmake $OS_FLAGS $TUDAT_FLAGS $PAGMO_FLAGS -DCMAKE_BUILD_TYPE=$BUILD_TYPE -B . -S ../tudatBundle

    - name: Build PAGMO
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: |
        cmake --build . --target all --config $BUILD_TYPE

    - name: list libraries after PAGMO
      if: failure()
      shell: bash
      run: |
        ls -l /home/runner/work/tudatBundle/tudatBundle/nlopt/lib

    - name: Test
      working-directory: ${{runner.workspace}}/build
      shell: bash
      run: ctest -C $BUILD_TYPE

    - name: Upload logs
      if: failure()
      uses: actions/upload-artifact@v1
      with:
        name: ${{ matrix.name }}_LatestTest.log
        path: ${{runner.workspace}}/build/Testing/Temporary/LastTest.log
